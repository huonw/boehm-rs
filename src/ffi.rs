/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type GC_PTR = *mut ::std::os::raw::c_void;
pub type GC_word = ::std::os::raw::c_ulong;
pub type GC_signed_word = ::std::os::raw::c_long;
pub type GC_oom_func =
    ::std::option::Option<extern "C" fn(arg1: size_t)
                              -> *mut ::std::os::raw::c_void>;
pub type GC_on_heap_resize_proc =
    ::std::option::Option<extern "C" fn(arg1: GC_word)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum GC_EventType {
    GC_EVENT_START = 0,
    GC_EVENT_MARK_START = 1,
    GC_EVENT_MARK_END = 2,
    GC_EVENT_RECLAIM_START = 3,
    GC_EVENT_RECLAIM_END = 4,
    GC_EVENT_END = 5,
    GC_EVENT_PRE_STOP_WORLD = 6,
    GC_EVENT_POST_STOP_WORLD = 7,
    GC_EVENT_PRE_START_WORLD = 8,
    GC_EVENT_POST_START_WORLD = 9,
    GC_EVENT_THREAD_SUSPENDED = 10,
    GC_EVENT_THREAD_UNSUSPENDED = 11,
}
pub type GC_on_collection_event_proc =
    ::std::option::Option<extern "C" fn(arg1: GC_EventType)>;
pub type GC_finalizer_notifier_proc = ::std::option::Option<extern "C" fn()>;
pub type GC_stop_func =
    ::std::option::Option<extern "C" fn() -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct GC_prof_stats_s {
    pub heapsize_full: GC_word,
    pub free_bytes_full: GC_word,
    pub unmapped_bytes: GC_word,
    pub bytes_allocd_since_gc: GC_word,
    pub allocd_bytes_before_gc: GC_word,
    pub non_gc_bytes: GC_word,
    pub gc_no: GC_word,
    pub markers_m1: GC_word,
    pub bytes_reclaimed_since_gc: GC_word,
    pub reclaimed_bytes_before_gc: GC_word,
}
impl ::std::default::Default for GC_prof_stats_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GC_finalization_proc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum GC_ToggleRefStatus {
    GC_TOGGLE_REF_DROP = 0,
    GC_TOGGLE_REF_STRONG = 1,
    GC_TOGGLE_REF_WEAK = 2,
}
pub type GC_toggleref_func =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> GC_ToggleRefStatus>;
pub type GC_await_finalize_proc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
pub type GC_warn_proc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_char,
                                               arg2: GC_word)>;
pub type GC_abort_func =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_char)>;
pub type GC_hidden_pointer = GC_word;
pub type GC_fn_type =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct GC_stack_base {
    pub mem_base: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for GC_stack_base {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GC_stack_base_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut GC_stack_base,
                                               arg2:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type GC_has_static_roots_func =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_char,
                                               arg2:
                                                   *mut ::std::os::raw::c_void,
                                               arg3: size_t)
                              -> ::std::os::raw::c_int>;
pub type GC_bitmap = *mut GC_word;
pub type GC_descr = GC_word;
extern "C" {
    pub static mut GC_gc_no: GC_word;
    pub static mut GC_oom_fn: GC_oom_func;
    pub static mut GC_on_heap_resize: GC_on_heap_resize_proc;
    pub static mut GC_find_leak: ::std::os::raw::c_int;
    pub static mut GC_all_interior_pointers: ::std::os::raw::c_int;
    pub static mut GC_finalize_on_demand: ::std::os::raw::c_int;
    pub static mut GC_java_finalization: ::std::os::raw::c_int;
    pub static mut GC_finalizer_notifier: GC_finalizer_notifier_proc;
    pub static mut GC_dont_gc: ::std::os::raw::c_int;
    pub static mut GC_dont_expand: ::std::os::raw::c_int;
    pub static mut GC_use_entire_heap: ::std::os::raw::c_int;
    pub static mut GC_full_freq: ::std::os::raw::c_int;
    pub static mut GC_non_gc_bytes: GC_word;
    pub static mut GC_no_dls: ::std::os::raw::c_int;
    pub static mut GC_free_space_divisor: GC_word;
    pub static mut GC_max_retries: GC_word;
    pub static mut GC_stackbottom: *mut ::std::os::raw::c_char;
    pub static mut GC_dont_precollect: ::std::os::raw::c_int;
    pub static mut GC_time_limit: ::std::os::raw::c_ulong;
    pub static mut GC_same_obj_print_proc:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_void)>;
    pub static mut GC_is_valid_displacement_print_proc:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void)>;
    pub static mut GC_is_visible_print_proc:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void)>;
}
extern "C" {
    pub fn GC_get_version() -> ::std::os::raw::c_uint;
    pub fn GC_get_gc_no() -> GC_word;
    pub fn GC_set_oom_fn(arg1: GC_oom_func);
    pub fn GC_get_oom_fn() -> GC_oom_func;
    pub fn GC_set_on_heap_resize(arg1: GC_on_heap_resize_proc);
    pub fn GC_get_on_heap_resize() -> GC_on_heap_resize_proc;
    pub fn GC_set_on_collection_event(arg1: GC_on_collection_event_proc);
    pub fn GC_get_on_collection_event() -> GC_on_collection_event_proc;
    pub fn GC_set_find_leak(arg1: ::std::os::raw::c_int);
    pub fn GC_get_find_leak() -> ::std::os::raw::c_int;
    pub fn GC_set_all_interior_pointers(arg1: ::std::os::raw::c_int);
    pub fn GC_get_all_interior_pointers() -> ::std::os::raw::c_int;
    pub fn GC_set_finalize_on_demand(arg1: ::std::os::raw::c_int);
    pub fn GC_get_finalize_on_demand() -> ::std::os::raw::c_int;
    pub fn GC_set_java_finalization(arg1: ::std::os::raw::c_int);
    pub fn GC_get_java_finalization() -> ::std::os::raw::c_int;
    pub fn GC_set_finalizer_notifier(arg1: GC_finalizer_notifier_proc);
    pub fn GC_get_finalizer_notifier() -> GC_finalizer_notifier_proc;
    pub fn GC_set_dont_expand(arg1: ::std::os::raw::c_int);
    pub fn GC_get_dont_expand() -> ::std::os::raw::c_int;
    pub fn GC_set_full_freq(arg1: ::std::os::raw::c_int);
    pub fn GC_get_full_freq() -> ::std::os::raw::c_int;
    pub fn GC_set_non_gc_bytes(arg1: GC_word);
    pub fn GC_get_non_gc_bytes() -> GC_word;
    pub fn GC_set_no_dls(arg1: ::std::os::raw::c_int);
    pub fn GC_get_no_dls() -> ::std::os::raw::c_int;
    pub fn GC_set_free_space_divisor(arg1: GC_word);
    pub fn GC_get_free_space_divisor() -> GC_word;
    pub fn GC_set_max_retries(arg1: GC_word);
    pub fn GC_get_max_retries() -> GC_word;
    pub fn GC_set_dont_precollect(arg1: ::std::os::raw::c_int);
    pub fn GC_get_dont_precollect() -> ::std::os::raw::c_int;
    pub fn GC_set_time_limit(arg1: ::std::os::raw::c_ulong);
    pub fn GC_get_time_limit() -> ::std::os::raw::c_ulong;
    pub fn GC_set_pages_executable(arg1: ::std::os::raw::c_int);
    pub fn GC_get_pages_executable() -> ::std::os::raw::c_int;
    pub fn GC_set_handle_fork(arg1: ::std::os::raw::c_int);
    pub fn GC_atfork_prepare();
    pub fn GC_atfork_parent();
    pub fn GC_atfork_child();
    pub fn GC_init();
    pub fn GC_malloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn GC_malloc_atomic(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn GC_strdup(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GC_strndup(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn GC_malloc_uncollectable(arg1: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_malloc_stubborn(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn GC_memalign(arg1: size_t, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_posix_memalign(arg1: *mut *mut ::std::os::raw::c_void,
                             arg2: size_t, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn GC_free(arg1: *mut ::std::os::raw::c_void);
    pub fn GC_change_stubborn(arg1: *const ::std::os::raw::c_void);
    pub fn GC_end_stubborn_change(arg1: *const ::std::os::raw::c_void);
    pub fn GC_base(arg1: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_is_heap_ptr(arg1: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_size(arg1: *const ::std::os::raw::c_void) -> size_t;
    pub fn GC_realloc(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_expand_hp(arg1: size_t) -> ::std::os::raw::c_int;
    pub fn GC_set_max_heap_size(arg1: GC_word);
    pub fn GC_exclude_static_roots(arg1: *mut ::std::os::raw::c_void,
                                   arg2: *mut ::std::os::raw::c_void);
    pub fn GC_clear_roots();
    pub fn GC_add_roots(arg1: *mut ::std::os::raw::c_void,
                        arg2: *mut ::std::os::raw::c_void);
    pub fn GC_remove_roots(arg1: *mut ::std::os::raw::c_void,
                           arg2: *mut ::std::os::raw::c_void);
    pub fn GC_register_displacement(arg1: size_t);
    pub fn GC_debug_register_displacement(arg1: size_t);
    pub fn GC_gcollect();
    pub fn GC_gcollect_and_unmap();
    pub fn GC_try_to_collect(arg1: GC_stop_func) -> ::std::os::raw::c_int;
    pub fn GC_set_stop_func(arg1: GC_stop_func);
    pub fn GC_get_stop_func() -> GC_stop_func;
    pub fn GC_get_heap_size() -> size_t;
    pub fn GC_get_free_bytes() -> size_t;
    pub fn GC_get_unmapped_bytes() -> size_t;
    pub fn GC_get_bytes_since_gc() -> size_t;
    pub fn GC_get_total_bytes() -> size_t;
    pub fn GC_get_heap_usage_safe(arg1: *mut GC_word, arg2: *mut GC_word,
                                  arg3: *mut GC_word, arg4: *mut GC_word,
                                  arg5: *mut GC_word);
    pub fn GC_get_prof_stats(arg1: *mut GC_prof_stats_s, arg2: size_t)
     -> size_t;
    pub fn GC_get_memory_use() -> size_t;
    pub fn GC_disable();
    pub fn GC_is_disabled() -> ::std::os::raw::c_int;
    pub fn GC_enable();
    pub fn GC_enable_incremental();
    pub fn GC_incremental_protection_needs() -> ::std::os::raw::c_int;
    pub fn GC_collect_a_little() -> ::std::os::raw::c_int;
    pub fn GC_malloc_ignore_off_page(arg1: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_malloc_atomic_ignore_off_page(arg1: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_malloc_atomic_uncollectable(arg1: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_malloc_atomic_uncollectable(arg1: size_t,
                                                s:
                                                    *const ::std::os::raw::c_char,
                                                i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_malloc(arg1: size_t, s: *const ::std::os::raw::c_char,
                           i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_malloc_atomic(arg1: size_t,
                                  s: *const ::std::os::raw::c_char,
                                  i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_strdup(arg1: *const ::std::os::raw::c_char,
                           s: *const ::std::os::raw::c_char,
                           i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn GC_debug_strndup(arg1: *const ::std::os::raw::c_char, arg2: size_t,
                            s: *const ::std::os::raw::c_char,
                            i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn GC_debug_malloc_uncollectable(arg1: size_t,
                                         s: *const ::std::os::raw::c_char,
                                         i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_malloc_stubborn(arg1: size_t,
                                    s: *const ::std::os::raw::c_char,
                                    i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_malloc_ignore_off_page(arg1: size_t,
                                           s: *const ::std::os::raw::c_char,
                                           i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_malloc_atomic_ignore_off_page(arg1: size_t,
                                                  s:
                                                      *const ::std::os::raw::c_char,
                                                  i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_free(arg1: *mut ::std::os::raw::c_void);
    pub fn GC_debug_realloc(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                            s: *const ::std::os::raw::c_char,
                            i: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_change_stubborn(arg1: *const ::std::os::raw::c_void);
    pub fn GC_debug_end_stubborn_change(arg1: *const ::std::os::raw::c_void);
    pub fn GC_debug_malloc_replacement(arg1: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_debug_realloc_replacement(arg1: *mut ::std::os::raw::c_void,
                                        arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_register_finalizer(arg1: *mut ::std::os::raw::c_void,
                                 arg2: GC_finalization_proc,
                                 arg3: *mut ::std::os::raw::c_void,
                                 arg4: *mut GC_finalization_proc,
                                 arg5: *mut *mut ::std::os::raw::c_void);
    pub fn GC_debug_register_finalizer(arg1: *mut ::std::os::raw::c_void,
                                       arg2: GC_finalization_proc,
                                       arg3: *mut ::std::os::raw::c_void,
                                       arg4: *mut GC_finalization_proc,
                                       arg5:
                                           *mut *mut ::std::os::raw::c_void);
    pub fn GC_register_finalizer_ignore_self(arg1:
                                                 *mut ::std::os::raw::c_void,
                                             arg2: GC_finalization_proc,
                                             arg3:
                                                 *mut ::std::os::raw::c_void,
                                             arg4: *mut GC_finalization_proc,
                                             arg5:
                                                 *mut *mut ::std::os::raw::c_void);
    pub fn GC_debug_register_finalizer_ignore_self(arg1:
                                                       *mut ::std::os::raw::c_void,
                                                   arg2: GC_finalization_proc,
                                                   arg3:
                                                       *mut ::std::os::raw::c_void,
                                                   arg4:
                                                       *mut GC_finalization_proc,
                                                   arg5:
                                                       *mut *mut ::std::os::raw::c_void);
    pub fn GC_register_finalizer_no_order(arg1: *mut ::std::os::raw::c_void,
                                          arg2: GC_finalization_proc,
                                          arg3: *mut ::std::os::raw::c_void,
                                          arg4: *mut GC_finalization_proc,
                                          arg5:
                                              *mut *mut ::std::os::raw::c_void);
    pub fn GC_debug_register_finalizer_no_order(arg1:
                                                    *mut ::std::os::raw::c_void,
                                                arg2: GC_finalization_proc,
                                                arg3:
                                                    *mut ::std::os::raw::c_void,
                                                arg4:
                                                    *mut GC_finalization_proc,
                                                arg5:
                                                    *mut *mut ::std::os::raw::c_void);
    pub fn GC_register_finalizer_unreachable(arg1:
                                                 *mut ::std::os::raw::c_void,
                                             arg2: GC_finalization_proc,
                                             arg3:
                                                 *mut ::std::os::raw::c_void,
                                             arg4: *mut GC_finalization_proc,
                                             arg5:
                                                 *mut *mut ::std::os::raw::c_void);
    pub fn GC_debug_register_finalizer_unreachable(arg1:
                                                       *mut ::std::os::raw::c_void,
                                                   arg2: GC_finalization_proc,
                                                   arg3:
                                                       *mut ::std::os::raw::c_void,
                                                   arg4:
                                                       *mut GC_finalization_proc,
                                                   arg5:
                                                       *mut *mut ::std::os::raw::c_void);
    pub fn GC_register_disappearing_link(arg1:
                                             *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_general_register_disappearing_link(arg1:
                                                     *mut *mut ::std::os::raw::c_void,
                                                 arg2:
                                                     *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_move_disappearing_link(arg1: *mut *mut ::std::os::raw::c_void,
                                     arg2: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_unregister_disappearing_link(arg1:
                                               *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_register_long_link(arg1: *mut *mut ::std::os::raw::c_void,
                                 arg2: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_move_long_link(arg1: *mut *mut ::std::os::raw::c_void,
                             arg2: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_unregister_long_link(arg1: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn GC_set_toggleref_func(arg1: GC_toggleref_func);
    pub fn GC_get_toggleref_func() -> GC_toggleref_func;
    pub fn GC_toggleref_add(arg1: *mut ::std::os::raw::c_void,
                            arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn GC_set_await_finalize_proc(arg1: GC_await_finalize_proc);
    pub fn GC_get_await_finalize_proc() -> GC_await_finalize_proc;
    pub fn GC_should_invoke_finalizers() -> ::std::os::raw::c_int;
    pub fn GC_invoke_finalizers() -> ::std::os::raw::c_int;
    pub fn GC_set_warn_proc(arg1: GC_warn_proc);
    pub fn GC_get_warn_proc() -> GC_warn_proc;
    pub fn GC_ignore_warn_proc(arg1: *mut ::std::os::raw::c_char,
                               arg2: GC_word);
    pub fn GC_set_log_fd(arg1: ::std::os::raw::c_int);
    pub fn GC_set_abort_func(arg1: GC_abort_func);
    pub fn GC_get_abort_func() -> GC_abort_func;
    pub fn GC_call_with_alloc_lock(arg1: GC_fn_type,
                                   arg2: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_call_with_stack_base(arg1: GC_stack_base_func,
                                   arg2: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_do_blocking(arg1: GC_fn_type, arg2: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_call_with_gc_active(arg1: GC_fn_type,
                                  arg2: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_get_stack_base(arg1: *mut GC_stack_base)
     -> ::std::os::raw::c_int;
    pub fn GC_same_obj(arg1: *mut ::std::os::raw::c_void,
                       arg2: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_pre_incr(arg1: *mut *mut ::std::os::raw::c_void,
                       arg2: ptrdiff_t) -> *mut ::std::os::raw::c_void;
    pub fn GC_post_incr(arg1: *mut *mut ::std::os::raw::c_void,
                        arg2: ptrdiff_t) -> *mut ::std::os::raw::c_void;
    pub fn GC_is_visible(arg1: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_is_valid_displacement(arg1: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_dump();
    pub fn GC_malloc_many(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn GC_register_has_static_roots_callback(arg1:
                                                     GC_has_static_roots_func);
    pub fn GC_set_force_unmap_on_gcollect(arg1: ::std::os::raw::c_int);
    pub fn GC_get_force_unmap_on_gcollect() -> ::std::os::raw::c_int;
    pub fn GC_win32_free_heap();
    pub fn GC_make_descriptor(arg1: *const GC_word, arg2: size_t) -> GC_descr;
    pub fn GC_malloc_explicitly_typed(arg1: size_t, arg2: GC_descr)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_malloc_explicitly_typed_ignore_off_page(arg1: size_t,
                                                      arg2: GC_descr)
     -> *mut ::std::os::raw::c_void;
    pub fn GC_calloc_explicitly_typed(arg1: size_t, arg2: size_t,
                                      arg3: GC_descr)
     -> *mut ::std::os::raw::c_void;
}
